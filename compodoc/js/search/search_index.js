var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/interfaces/Args.html",[0,0.866,1,0.866]],["body/interfaces/Args.html",[0,0.739,1,1.033,2,0.744,3,0.947,4,0.947,5,0.923,6,0.471,7,1.486,8,1.147,9,0.37,10,1.486,11,1.246,12,2.185,13,1.255,14,1.486,15,1.993,16,1.486,17,1.255,18,1.255,19,1.566,20,1.191,21,0.092,22,2.504,23,0.929,24,1.29,25,0.929,26,0.929,27,1.167,28,0.929,29,0.947,30,0.947,31,2.593,32,1.299,33,0.812,34,0.471,35,0.471,36,0.812,37,0.471,38,0.471,39,0.471,40,1.067,41,1.558,42,0.581,43,1.033,44,0.592,45,1.566,46,1.191,47,0.929,48,0.812,49,1.191,50,0.592,51,0.812,52,1.105,53,0.592,54,0.744,55,0.739,56,0.812,57,1.191,58,0.929,59,0.739,60,0.739,61,0.812,62,0.592,63,0.37,64,0.592,65,0.739,66,2.28,67,0.929,68,1.706,69,1.441,70,0.471,71,1.147,72,0.947,73,0.947,74,0.592,75,1.406,76,1.299,77,2.407,78,1.299,79,1.632,80,0.744,81,1.498,82,0.592,83,1.167,84,0.739,85,1.033,86,0.592,87,1.167,88,1.167,89,0.744,90,0.744,91,1.167,92,1.441,93,0.744,94,0.744,95,1.632,96,0.744,97,0.799,98,0.744,99,0.592,100,0.744,101,0.744,102,1.167,103,0.744,104,1.441,105,1.441,106,1.441,107,1.441,108,1.441,109,1.441,110,1.441,111,0.744,112,0.744,113,0.744,114,0.592,115,0.744,116,0.744,117,0.744,118,0.744,119,0.592,120,0.947,121,0.744,122,0.947,123,0.947,124,0.947,125,0.947,126,0.947,127,0.947,128,2.593,129,2.593,130,0.929,131,0.947,132,1.486,133,2.593,134,0.947,135,0.947,136,1.441,137,1.566,138,2.903,139,2.504,140,2.095,141,0.947,142,2.504,143,0.947,144,1.167,145,1.834,146,0.947,147,0.744,148,1.486,149,0.947,150,0.947,151,1.167,152,0.947,153,0.947,154,0.947,155,0.947,156,0.947,157,0.592,158,0.744,159,0.744,160,0.744,161,0.744,162,0.744,163,0.744,164,0.744,165,0.744,166,0.744,167,0.739,168,0.744,169,0.744,170,0.744,171,0.744,172,0.744,173,0.744,174,0.744,175,0.744,176,0.744,177,0.744,178,0.744,179,0.744,180,0.744,181,0.744,182,0.744,183,1.167,184,0.744,185,0.592,186,0.744,187,0.744,188,0.744,189,1.167,190,0.592,191,0.744,192,0.026,193,0.04,194,0.026]],["title/interfaces/Params.html",[0,0.866,8,0.68]],["body/interfaces/Params.html",[0,0.714,1,0.886,2,0.712,3,0.906,4,0.906,5,0.917,6,0.451,7,0.906,8,1.136,9,0.354,10,1.435,11,1.008,12,2.159,14,0.906,15,2.031,16,0.906,19,1.54,20,1.222,21,0.092,22,2.463,23,0.897,24,1.27,25,0.897,26,0.897,27,1.127,28,0.897,29,0.906,30,0.906,31,2.554,32,1.54,33,0.963,34,0.451,35,0.451,36,0.963,37,0.451,38,0.451,39,0.451,40,1.053,41,1.549,42,0.561,43,1.225,44,0.566,45,1.54,46,1.183,47,0.897,48,0.963,49,1.169,50,0.566,51,0.963,52,1.093,53,0.566,54,0.712,55,0.714,56,0.963,57,1.169,58,0.897,59,0.714,60,0.714,61,0.963,62,0.566,63,0.354,64,0.566,65,0.714,66,2.258,67,0.897,68,1.685,69,1.4,70,0.451,71,1.114,72,0.906,73,0.906,74,0.566,75,1.391,76,1.268,77,2.391,78,1.268,79,1.592,80,0.712,81,1.47,82,0.566,83,1.127,84,0.714,85,1.008,86,0.566,87,1.127,88,1.127,89,0.712,90,0.712,91,1.127,92,1.4,93,0.712,94,0.712,95,1.592,96,0.712,97,0.788,98,0.712,99,0.566,100,0.712,101,0.712,102,1.127,103,0.712,104,1.4,105,1.4,106,1.4,107,1.4,108,1.4,109,1.4,110,1.4,111,0.712,112,0.712,113,0.712,114,0.566,115,0.712,116,0.712,117,0.712,118,0.712,119,0.566,120,0.906,121,0.712,122,0.906,123,0.906,124,0.906,125,0.906,126,0.906,127,0.906,128,2.554,129,2.554,130,0.897,131,0.906,132,1.435,133,2.554,134,0.906,135,0.906,136,1.4,137,1.54,138,2.874,139,2.463,140,2.066,141,0.906,142,2.463,143,0.906,144,1.127,145,1.782,146,0.906,147,0.712,148,1.435,149,0.906,150,0.906,151,1.127,152,0.906,153,0.906,154,0.906,155,0.906,156,0.906,157,0.566,158,0.712,159,0.712,160,0.712,161,0.712,162,0.712,163,0.712,164,0.712,165,0.712,166,0.712,167,0.714,168,0.712,169,0.712,170,0.712,171,0.712,172,0.712,173,0.712,174,0.712,175,0.712,176,0.712,177,0.712,178,0.712,179,0.712,180,0.712,181,0.712,182,0.712,183,1.127,184,0.712,185,0.566,186,0.712,187,0.712,188,0.712,189,1.127,190,0.566,191,0.712,192,0.025,193,0.039,194,0.025,195,2.935]],["title/coverage.html",[196,2.314]],["body/coverage.html",[0,1.237,1,0.967,5,0.582,6,1.565,8,0.76,11,0.967,20,0.76,21,0.091,59,0.967,67,1.215,74,1.215,75,1.637,78,1.215,99,1.215,114,1.215,157,1.215,192,0.053,193,0.067,194,0.053,196,1.944,197,2.577,198,2.577,199,2.516,200,1.944,201,4.246,202,4.246,203,1.944,204,1.944,205,1.944,206,1.944,207,1.944,208,1.944,209,1.944,210,1.944,211,4.119,212,1.944,213,3.056,214,1.944,215,4.35,216,4.317,217,1.944,218,1.944,219,1.944,220,1.944,221,1.944,222,2.577,223,2.577,224,1.944,225,1.944,226,2.577,227,2.577]],["title/dependencies.html",[228,1.968,229,1.631]],["body/dependencies.html",[21,0.092,23,1.434,25,1.434,26,1.434,27,1.802,28,1.434,97,0.687,192,0.062,193,0.075,194,0.062,229,1.802,230,2.294,231,2.294,232,3.041,233,2.294,234,3.041,235,2.294,236,3.653,237,2.294,238,3.041,239,3.041,240,3.041,241,3.041,242,3.041,243,3.041,244,2.294,245,2.294,246,3.041,247,2.294,248,3.041,249,3.041,250,3.041,251,3.041,252,2.294,253,3.041,254,3.041,255,2.294,256,3.041,257,2.294,258,3.041,259,2.294,260,2.294,261,3.041,262,2.294,263,3.653,264,1.802,265,3.041]],["title/miscellaneous/functions.html",[266,0.928,267,2.076]],["body/miscellaneous/functions.html",[5,0.934,6,0.633,8,0.727,9,0.497,11,1.202,15,1.374,19,1.734,20,0.945,21,0.09,24,0.925,32,1.163,33,1.005,34,0.633,35,0.633,36,0.727,37,1.202,38,0.633,39,1.335,40,1.133,42,0.859,43,0.925,44,1.813,45,1.907,46,1.005,48,0.497,49,1.202,51,0.727,52,1.225,56,0.945,57,0.925,61,0.727,68,0.796,75,1.279,76,1.734,81,1.511,84,1.541,85,0.925,86,1.607,97,0.381,121,1,130,1.679,137,1.163,167,0.633,185,0.796,190,0.796,192,0.035,193,0.05,194,0.035,195,3.097,199,1,200,1.859,203,1.859,204,1.859,205,1.859,206,1.859,207,1.859,208,1.859,209,1.859,210,1.859,213,1.273,214,1.859,217,1.859,218,1.859,219,2.197,220,1.859,221,1.859,264,1,266,0.796,267,1.273,268,2.899,269,1.273,270,3.559,271,1.687,272,1.687,273,2.913,274,1.898,275,2.346,276,2.913,277,2.415,278,1.687,279,2.197,280,1,281,1.273,282,1.687,283,4.076,284,2.465,285,1.687,286,1,287,2.109,288,2.417,289,1,290,1,291,2.197,292,1.859,293,1.273,294,1.273,295,1.687,296,1.687,297,1.687,298,1.687,299,1.859,300,2.571,301,1.859,302,1.859,303,2.465,304,1.273,305,1.859,306,1.687,307,1.687,308,2.465,309,3.559,310,1.859,311,1.687,312,1.687,313,1.687,314,1.687,315,1.687,316,1.273,317,1.687,318,3.204,319,1.687,320,1.859,321,1.687,322,1.859,323,1,324,2.913,325,1.859,326,2.465,327,2.465,328,1.859,329,1.687,330,1.687,331,1.273,332,1.687,333,1.859,334,1,335,1.687,336,1.687,337,2.465,338,1.687,339,1.687,340,1.687,341,1.687,342,1.687,343,1.687,344,1.687,345,2.465,346,1.273,347,1.687,348,2.465,349,1.687,350,1.273,351,2.913,352,1.687,353,1.687,354,1.687,355,1.273,356,1.687,357,1.687,358,2.913,359,1.687,360,3.204,361,1.687,362,2.913,363,1.687,364,1.687,365,1.687,366,1.687,367,1.687]],["title/index.html",[9,0.58,368,1.485,369,1.968]],["body/index.html",[5,0.945,9,0.838,21,0.072,24,1.22,33,0.608,34,1.066,35,1.22,36,0.608,37,1.38,38,0.773,39,0.773,40,1.034,41,1.53,42,1.034,43,0.773,44,1.654,45,1.943,46,1.233,47,0.972,48,0.608,49,1.489,50,0.972,51,0.608,52,1.084,53,0.972,55,1.066,56,0.608,57,1.22,58,1.341,59,1.066,60,1.579,61,0.608,62,0.972,63,0.608,64,0.972,65,1.22,70,0.773,82,0.972,84,1.315,85,0.773,97,0.642,119,0.972,130,0.972,136,2.179,147,1.222,192,0.042,193,0.058,194,0.042,252,1.555,274,1.927,275,2.078,277,1.684,279,1.555,280,1.684,281,2.454,286,1.684,287,1.684,288,1.555,289,1.222,290,1.684,291,2.144,292,1.555,299,1.555,300,2.939,301,2.144,302,2.144,304,1.555,305,2.144,310,2.144,316,1.555,320,2.144,322,2.454,323,1.222,325,1.555,328,2.144,333,1.555,334,1.222,346,1.555,350,2.144,368,1.555,370,3.253,371,2.062,372,2.062,373,2.062,374,2.062,375,2.842,376,2.062,377,2.842,378,2.062,379,1.555,380,1.555,381,2.062,382,2.062,383,2.062,384,2.062,385,2.144,386,2.842,387,2.062,388,2.062,389,3.506,390,2.062,391,2.062,392,2.062,393,3.253,394,1.555,395,2.062,396,2.842,397,3.253,398,3.506,399,3.253,400,2.062,401,2.062,402,2.062,403,2.062,404,2.062,405,2.062,406,2.062,407,2.842,408,2.062,409,2.062,410,2.062,411,2.842,412,2.842,413,2.062,414,2.062,415,2.062,416,2.062,417,2.842,418,2.144,419,2.062,420,2.062,421,2.062,422,2.062,423,2.062,424,2.842,425,2.062,426,2.062,427,2.062,428,2.062,429,2.062,430,2.062,431,2.062,432,2.062,433,2.062,434,2.062,435,2.062,436,2.062,437,2.062,438,2.062,439,2.062,440,3.802,441,3.506,442,2.062]],["title/modules.html",[443,2.314]],["body/modules.html",[21,0.081,192,0.071,193,0.081,194,0.071,443,2.614]],["title/overview.html",[444,2.314]],["body/overview.html",[2,2.044,21,0.081,192,0.071,193,0.081,194,0.071,444,2.603,445,2.603]],["title/miscellaneous/variables.html",[266,0.928,446,2.076]],["body/miscellaneous/variables.html",[1,1.113,5,0.839,6,0.654,8,1.142,9,0.744,11,0.947,12,2.2,15,1.918,19,1.534,20,1.209,21,0.092,32,1.534,33,0.875,36,0.744,40,0.514,41,1.598,42,0.514,43,1.113,46,0.875,47,0.822,48,0.744,51,0.744,52,0.514,55,0.654,56,0.875,60,0.654,61,0.744,65,0.654,66,1.758,67,1.19,68,1.628,69,1.758,70,0.654,71,0.822,74,1.19,75,1.295,76,1.534,77,2.133,78,1.628,79,2.046,80,1.033,81,1.698,82,0.822,83,1.495,84,0.947,85,1.22,86,0.822,87,1.495,88,1.495,89,1.033,90,1.033,91,1.495,92,1.758,93,1.033,94,1.033,95,1.927,96,1.033,97,0.78,98,1.033,99,1.19,100,1.495,101,1.033,102,1.927,103,1.495,104,1.033,105,1.033,106,1.033,107,1.033,108,1.033,109,1.033,110,1.033,111,1.033,112,1.495,113,1.033,114,1.19,115,1.033,116,1.033,117,1.033,118,1.033,119,0.822,140,2.2,144,1.033,151,1.033,157,1.19,158,1.033,159,1.033,160,1.033,161,1.033,162,1.033,163,1.033,164,1.033,165,1.033,166,1.033,167,0.947,168,1.033,169,1.033,170,1.033,171,1.033,172,1.033,173,1.033,174,1.033,175,1.033,176,1.033,177,1.033,178,1.033,179,1.033,180,1.033,181,1.033,182,1.033,183,1.495,184,1.033,185,0.822,186,1.033,187,1.033,188,1.033,189,1.495,190,0.822,191,1.033,192,0.036,193,0.052,194,0.036,199,1.033,212,1.904,224,1.314,225,1.904,266,0.822,268,1.314,269,2.604,286,1.033,287,1.033,289,1.033,290,1.033,293,1.314,294,1.314,334,1.033,418,1.314,446,1.314,447,1.743,448,1.743,449,1.743,450,1.743,451,1.314,452,1.743,453,1.743,454,1.743,455,1.743,456,1.743,457,1.743,458,1.743,459,1.743,460,1.743,461,1.743,462,1.743,463,1.743,464,1.743,465,1.743,466,1.743,467,2.524,468,1.743,469,1.743,470,1.743,471,1.743,472,1.743,473,1.743,474,1.743,475,1.743]],["title/additional-documentation/development-log.html",[63,0.506,476,1.295,477,1.295,478,1.295]],["body/additional-documentation/development-log.html",[5,0.895,20,0.699,21,0.087,23,1.117,24,1.447,25,1.117,26,1.117,28,1.117,33,0.92,34,0.889,35,0.889,36,1.094,37,0.889,38,0.889,39,0.889,40,0.699,41,1.447,42,1.029,46,1.168,48,0.699,49,1.392,50,1.117,51,0.699,52,0.699,53,1.117,54,1.404,55,1.31,56,0.699,57,1.31,58,1.472,59,1.171,60,1.486,61,0.699,62,1.117,63,0.699,64,1.75,65,0.889,70,1.31,71,1.647,97,0.535,137,1.117,167,0.889,192,0.048,193,0.064,194,0.048,229,2.069,230,1.787,231,1.787,233,1.787,235,1.787,237,1.787,244,1.787,245,1.787,247,1.787,255,1.787,257,1.787,259,1.787,260,1.787,262,2.355,264,1.404,274,1.404,275,1.404,277,1.404,280,1.85,323,1.85,331,1.787,355,1.787,379,3.046,380,2.987,385,1.787,394,1.787,451,1.787,477,1.787,478,1.787,479,2.369,480,2.369,481,3.122,482,2.369,483,2.369,484,3.857,485,2.369,486,3.711,487,3.857,488,2.369,489,2.369,490,2.369,491,2.369,492,2.369,493,3.122,494,2.369,495,3.122,496,2.369,497,2.369,498,2.369,499,3.122,500,2.369,501,2.369,502,3.122,503,2.369,504,2.369,505,2.369,506,2.369,507,2.369,508,2.369,509,2.369,510,2.369,511,2.369,512,2.369,513,2.369,514,2.369,515,2.369,516,2.369,517,2.369,518,2.369,519,2.369,520,2.369,521,2.369,522,2.369,523,3.122,524,3.122,525,3.122,526,3.122,527,2.369,528,3.122,529,2.369]],["title/additional-documentation/issues.html",[63,0.58,476,1.485,530,1.485]],["body/additional-documentation/issues.html",[21,0.08,192,0.07,193,0.08,194,0.07,445,2.591,530,2.591,531,3.924,532,3.435]]],"invertedIndex":[["",{"_index":21,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{},"additional-documentation/development-log.html":{},"additional-documentation/issues.html":{}}}],["0",{"_index":215,"title":{},"body":{"coverage.html":{}}}],["0.1.0",{"_index":236,"title":{},"body":{"dependencies.html":{}}}],["0.3.6",{"_index":246,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":216,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":223,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":222,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":532,"title":{},"body":{"additional-documentation/issues.html":{}}}],["1.2.0",{"_index":238,"title":{},"body":{"dependencies.html":{}}}],["1.2.5",{"_index":258,"title":{},"body":{"dependencies.html":{}}}],["1.4.0",{"_index":249,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":232,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":202,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":201,"title":{},"body":{"coverage.html":{}}}],["15.0.5",{"_index":242,"title":{},"body":{"dependencies.html":{}}}],["15.3.1",{"_index":265,"title":{},"body":{"dependencies.html":{}}}],["18.0.0",{"_index":234,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":445,"title":{},"body":{"overview.html":{},"additional-documentation/issues.html":{}}}],["2.6.0",{"_index":261,"title":{},"body":{"dependencies.html":{}}}],["3.1.0",{"_index":263,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":243,"title":{},"body":{"dependencies.html":{}}}],["4.17.15",{"_index":256,"title":{},"body":{"dependencies.html":{}}}],["4.7.6",{"_index":253,"title":{},"body":{"dependencies.html":{}}}],["5.0.1",{"_index":248,"title":{},"body":{"dependencies.html":{}}}],["6.5.0",{"_index":240,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":254,"title":{},"body":{"dependencies.html":{}}}],["9.0.1",{"_index":251,"title":{},"body":{"dependencies.html":{}}}],["according",{"_index":511,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["accordingly",{"_index":491,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["additional",{"_index":476,"title":{"additional-documentation/development-log.html":{},"additional-documentation/issues.html":{}},"body":{}}],["addpurposes",{"_index":200,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["addpurposes(projects",{"_index":271,"title":{},"body":{"miscellaneous/functions.html":{}}}],["adds",{"_index":272,"title":{},"body":{"miscellaneous/functions.html":{}}}],["alias",{"_index":102,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["angular",{"_index":370,"title":{},"body":{"index.html":{}}}],["angular.json",{"_index":42,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/development-log.html":{}}}],["api",{"_index":293,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["app",{"_index":322,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["app's",{"_index":44,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["app01",{"_index":397,"title":{},"body":{"index.html":{}}}],["app02",{"_index":398,"title":{},"body":{"index.html":{}}}],["app03",{"_index":399,"title":{},"body":{"index.html":{}}}],["application",{"_index":529,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["approtriately",{"_index":507,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["apps",{"_index":300,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["apps/projects",{"_index":340,"title":{},"body":{"miscellaneous/functions.html":{}}}],["args",{"_index":1,"title":{"interfaces/Args.html":{}},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["args.askparams",{"_index":469,"title":{},"body":{"miscellaneous/variables.html":{}}}],["args.configfile",{"_index":472,"title":{},"body":{"miscellaneous/variables.html":{}}}],["args[key",{"_index":113,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["argv",{"_index":112,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["article",{"_index":512,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["askparams",{"_index":11,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["askparams(params",{"_index":121,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/functions.html":{}}}],["askparams=false",{"_index":425,"title":{},"body":{"index.html":{}}}],["askparams=true",{"_index":423,"title":{},"body":{"index.html":{}}}],["assembles",{"_index":372,"title":{},"body":{"index.html":{}}}],["async",{"_index":120,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["await",{"_index":128,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["based",{"_index":375,"title":{},"body":{"index.html":{}}}],["basic",{"_index":231,"title":{},"body":{"dependencies.html":{},"additional-documentation/development-log.html":{}}}],["being",{"_index":312,"title":{},"body":{"miscellaneous/functions.html":{}}}],["boolean",{"_index":19,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["brief",{"_index":301,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["build",{"_index":499,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["building",{"_index":384,"title":{},"body":{"index.html":{}}}],["c",{"_index":103,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["catch",{"_index":96,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["catch(e",{"_index":474,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cd",{"_index":487,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["chalk",{"_index":25,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"dependencies.html":{},"additional-documentation/development-log.html":{}}}],["chalk.cyanbright",{"_index":124,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["change",{"_index":407,"title":{},"body":{"index.html":{}}}],["chapter",{"_index":310,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["clear",{"_index":244,"title":{},"body":{"dependencies.html":{},"additional-documentation/development-log.html":{}}}],["cli",{"_index":526,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["clui",{"_index":245,"title":{},"body":{"dependencies.html":{},"additional-documentation/development-log.html":{}}}],["code",{"_index":358,"title":{},"body":{"miscellaneous/functions.html":{}}}],["comes",{"_index":304,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["comilation",{"_index":509,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["compile",{"_index":338,"title":{},"body":{"miscellaneous/functions.html":{}}}],["compiles",{"_index":337,"title":{},"body":{"miscellaneous/functions.html":{}}}],["compodoc",{"_index":47,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["config",{"_index":119,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["configfile",{"_index":12,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["configstore",{"_index":247,"title":{},"body":{"dependencies.html":{},"additional-documentation/development-log.html":{}}}],["configuration",{"_index":98,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["confirm",{"_index":131,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["console.clear",{"_index":122,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["console.error(e.message",{"_index":475,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log",{"_index":123,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["console.warn(`cannot",{"_index":117,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["console.warn(`using",{"_index":83,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["const",{"_index":66,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["containing",{"_index":346,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["contains",{"_index":37,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/functions.html":{},"index.html":{},"additional-documentation/development-log.html":{}}}],["content",{"_index":348,"title":{},"body":{"miscellaneous/functions.html":{}}}],["control",{"_index":505,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["controls",{"_index":296,"title":{},"body":{"miscellaneous/functions.html":{}}}],["copied",{"_index":333,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["copies",{"_index":291,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["copy",{"_index":130,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["copying",{"_index":435,"title":{},"body":{"index.html":{}}}],["copyprojectsdocs",{"_index":32,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["copyprojectsdocs:boolean",{"_index":449,"title":{},"body":{"miscellaneous/variables.html":{}}}],["copyprojectsdocs=false",{"_index":433,"title":{},"body":{"index.html":{}}}],["copyprojectsdocs=true",{"_index":316,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["copyprojectsdocs['copy",{"_index":135,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["core",{"_index":521,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["coverage",{"_index":196,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":484,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["created",{"_index":64,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"index.html":{},"additional-documentation/development-log.html":{}}}],["createdoc",{"_index":203,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createdoc(params",{"_index":285,"title":{},"body":{"miscellaneous/functions.html":{}}}],["creates",{"_index":286,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["creating",{"_index":53,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"index.html":{},"additional-documentation/development-log.html":{}}}],["creation",{"_index":355,"title":{},"body":{"miscellaneous/functions.html":{},"additional-documentation/development-log.html":{}}}],["data",{"_index":82,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["default",{"_index":41,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/development-log.html":{}}}],["defined",{"_index":17,"title":{},"body":{"interfaces/Args.html":{}}}],["dependencies",{"_index":229,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"additional-documentation/development-log.html":{}}}],["description",{"_index":277,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"additional-documentation/development-log.html":{}}}],["descrption",{"_index":349,"title":{},"body":{"miscellaneous/functions.html":{}}}],["desired",{"_index":292,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["desired/exists",{"_index":319,"title":{},"body":{"miscellaneous/functions.html":{}}}],["destination",{"_index":326,"title":{},"body":{"miscellaneous/functions.html":{}}}],["detail",{"_index":439,"title":{},"body":{"index.html":{}}}],["details",{"_index":328,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["development",{"_index":477,"title":{"additional-documentation/development-log.html":{}},"body":{"additional-documentation/development-log.html":{}}}],["dialog",{"_index":427,"title":{},"body":{"index.html":{}}}],["dircreate",{"_index":214,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["dircreate(filepath",{"_index":361,"title":{},"body":{"miscellaneous/functions.html":{}}}],["directories",{"_index":393,"title":{},"body":{"index.html":{}}}],["directory",{"_index":46,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/development-log.html":{}}}],["direxists",{"_index":217,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["direxists(filepath",{"_index":363,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dirname",{"_index":366,"title":{},"body":{"miscellaneous/functions.html":{}}}],["doc",{"_index":315,"title":{},"body":{"miscellaneous/functions.html":{}}}],["doc's",{"_index":430,"title":{},"body":{"index.html":{}}}],["docs",{"_index":45,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["documentation",{"_index":59,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"coverage.html":{},"index.html":{},"additional-documentation/development-log.html":{}}}],["due",{"_index":85,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["during",{"_index":508,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["e.g",{"_index":335,"title":{},"body":{"miscellaneous/functions.html":{}}}],["each",{"_index":279,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["empty",{"_index":523,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["enough",{"_index":524,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["enriched",{"_index":284,"title":{},"body":{"miscellaneous/functions.html":{}}}],["enter",{"_index":138,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["entering",{"_index":404,"title":{},"body":{"index.html":{}}}],["entries",{"_index":436,"title":{},"body":{"index.html":{}}}],["enumerable",{"_index":278,"title":{},"body":{"miscellaneous/functions.html":{}}}],["error",{"_index":81,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["error(errors.tostring",{"_index":191,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["error(s",{"_index":190,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["error.message",{"_index":87,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["errors",{"_index":185,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["errors.foreach((error",{"_index":187,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["errors.length>0",{"_index":181,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["errors.length>1",{"_index":182,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["errors.push(`output",{"_index":176,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["errors.push(`outputfile",{"_index":179,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["errors.push(`projects",{"_index":164,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["errors.push(`repository",{"_index":161,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["errors.push(`template",{"_index":172,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["errors.push(`templates",{"_index":169,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["errors:string",{"_index":159,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["example",{"_index":70,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/development-log.html":{}}}],["example\\projects\\app02\\compodoc",{"_index":411,"title":{},"body":{"index.html":{}}}],["exist",{"_index":323,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"additional-documentation/development-log.html":{}}}],["existant",{"_index":441,"title":{},"body":{"index.html":{}}}],["existing",{"_index":145,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["exists",{"_index":167,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{},"additional-documentation/development-log.html":{}}}],["exits",{"_index":412,"title":{},"body":{"index.html":{}}}],["export",{"_index":31,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["extends",{"_index":7,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["extra",{"_index":250,"title":{},"body":{"dependencies.html":{}}}],["extract",{"_index":307,"title":{},"body":{"miscellaneous/functions.html":{}}}],["extractpurpose",{"_index":204,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["extractpurpose(sourcetext",{"_index":298,"title":{},"body":{"miscellaneous/functions.html":{}}}],["extracts",{"_index":299,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["extraimplementation",{"_index":515,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["false",{"_index":332,"title":{},"body":{"miscellaneous/functions.html":{}}}],["features",{"_index":373,"title":{},"body":{"index.html":{}}}],["fetched",{"_index":313,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fetchprojectdocs",{"_index":205,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["fetchprojectdocs(key",{"_index":456,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fetchprojectdocs(projectname",{"_index":314,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fetchprojectsdocs",{"_index":212,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["figlet",{"_index":26,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"dependencies.html":{},"additional-documentation/development-log.html":{}}}],["figlet.textsync('repodoc",{"_index":125,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/development-log.html":{}}}],["file(s",{"_index":50,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"index.html":{},"additional-documentation/development-log.html":{}}}],["fileexists",{"_index":218,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["fileexists(filepath",{"_index":364,"title":{},"body":{"miscellaneous/functions.html":{}}}],["filename",{"_index":264,"title":{},"body":{"dependencies.html":{},"miscellaneous/functions.html":{},"additional-documentation/development-log.html":{}}}],["filepath",{"_index":362,"title":{},"body":{"miscellaneous/functions.html":{}}}],["files",{"_index":394,"title":{},"body":{"index.html":{},"additional-documentation/development-log.html":{}}}],["find",{"_index":431,"title":{},"body":{"index.html":{}}}],["finds",{"_index":374,"title":{},"body":{"index.html":{}}}],["first",{"_index":400,"title":{},"body":{"index.html":{}}}],["following",{"_index":409,"title":{},"body":{"index.html":{}}}],["found",{"_index":311,"title":{},"body":{"miscellaneous/functions.html":{}}}],["fs",{"_index":23,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"dependencies.html":{},"additional-documentation/development-log.html":{}}}],["fs.readfile(configfile",{"_index":80,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["fs.writefile(configfile",{"_index":115,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["fsu",{"_index":29,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["fsu.dircreate(string(params.outputdir",{"_index":175,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["fsu.dircreate(value",{"_index":153,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["fsu.direxists(string(params.repodir",{"_index":160,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["fsu.direxists(string(params.templatesdir",{"_index":168,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["fsu.direxists(value",{"_index":141,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["fsu.fileexists(path.join(string(params.repodir",{"_index":144,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["fsu.fileexists(path.join(string(params.templatesdir",{"_index":151,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["fsu.isvaliddirectoryname(value",{"_index":148,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["fsu.isvalidfilename(string(params.outputfile",{"_index":178,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["fsu.isvalidfilename(value",{"_index":155,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["fsutils",{"_index":30,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["full",{"_index":127,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["function",{"_index":75,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["function():void",{"_index":463,"title":{},"body":{"miscellaneous/variables.html":{}}}],["functions",{"_index":267,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":416,"title":{},"body":{"index.html":{}}}],["generates",{"_index":432,"title":{},"body":{"index.html":{}}}],["getcwd",{"_index":219,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["gethtmlstring",{"_index":206,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["gethtmlstring(template",{"_index":336,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getprojects",{"_index":207,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getprojects(repodir",{"_index":339,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getpurpose",{"_index":208,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["getpurpose(readmefile",{"_index":344,"title":{},"body":{"miscellaneous/functions.html":{}}}],["gettemplate",{"_index":209,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["gettemplate(templatesdir",{"_index":353,"title":{},"body":{"miscellaneous/functions.html":{}}}],["getting",{"_index":368,"title":{"index.html":{}},"body":{"index.html":{}}}],["git",{"_index":260,"title":{},"body":{"dependencies.html":{},"additional-documentation/development-log.html":{}}}],["globally",{"_index":483,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["gusage",{"_index":381,"title":{},"body":{"index.html":{}}}],["handlebar",{"_index":376,"title":{},"body":{"index.html":{}}}],["handlebars",{"_index":252,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["hbs",{"_index":354,"title":{},"body":{"miscellaneous/functions.html":{}}}],["horizontallayout",{"_index":126,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["html",{"_index":287,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["htmlstring",{"_index":359,"title":{},"body":{"miscellaneous/functions.html":{}}}],["identifier",{"_index":197,"title":{},"body":{"coverage.html":{}}}],["import",{"_index":22,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["index.hbs",{"_index":55,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/development-log.html":{}}}],["index.html",{"_index":65,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/development-log.html":{}}}],["indexable",{"_index":13,"title":{},"body":{"interfaces/Args.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["informs",{"_index":415,"title":{},"body":{"index.html":{}}}],["init",{"_index":488,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["initchange",{"_index":497,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["initialize",{"_index":494,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["initparams",{"_index":74,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["input",{"_index":137,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/functions.html":{},"additional-documentation/development-log.html":{}}}],["inquirer",{"_index":28,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"dependencies.html":{},"additional-documentation/development-log.html":{}}}],["inquirer.prompt",{"_index":129,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["install",{"_index":380,"title":{},"body":{"index.html":{},"additional-documentation/development-log.html":{}}}],["installation",{"_index":378,"title":{},"body":{"index.html":{}}}],["installed",{"_index":482,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["interface",{"_index":0,"title":{"interfaces/Args.html":{},"interfaces/Params.html":{}},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"overview.html":{}}}],["internalize",{"_index":73,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["issue",{"_index":531,"title":{},"body":{"additional-documentation/issues.html":{}}}],["issues",{"_index":530,"title":{"additional-documentation/issues.html":{}},"body":{"additional-documentation/issues.html":{}}}],["isvaliddirectoryname",{"_index":220,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isvaliddirectoryname(dirname",{"_index":365,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isvalidfilename",{"_index":221,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["isvalidfilename(filename",{"_index":367,"title":{},"body":{"miscellaneous/functions.html":{}}}],["json",{"_index":38,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/functions.html":{},"index.html":{},"additional-documentation/development-log.html":{}}}],["json.parse(data.tostring",{"_index":90,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["json.stringify(params",{"_index":116,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["keys.map((key",{"_index":459,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keys:string",{"_index":453,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landing",{"_index":62,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"index.html":{},"additional-documentation/development-log.html":{}}}],["last",{"_index":420,"title":{},"body":{"index.html":{}}}],["lead",{"_index":318,"title":{},"body":{"miscellaneous/functions.html":{}}}],["link",{"_index":288,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["list",{"_index":377,"title":{},"body":{"index.html":{}}}],["lodash",{"_index":255,"title":{},"body":{"dependencies.html":{},"additional-documentation/development-log.html":{}}}],["log",{"_index":478,"title":{"additional-documentation/development-log.html":{}},"body":{"additional-documentation/development-log.html":{}}}],["main",{"_index":225,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["matching",{"_index":193,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{},"additional-documentation/development-log.html":{},"additional-documentation/issues.html":{}}}],["md",{"_index":486,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["message",{"_index":133,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["messages",{"_index":410,"title":{},"body":{"index.html":{}}}],["minimist",{"_index":257,"title":{},"body":{"dependencies.html":{},"additional-documentation/development-log.html":{}}}],["miscellaneous",{"_index":266,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":350,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["module",{"_index":294,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":443,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["moment",{"_index":525,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["mono",{"_index":34,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/functions.html":{},"index.html":{},"additional-documentation/development-log.html":{}}}],["monorepo",{"_index":290,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["monorepo/multiapp",{"_index":371,"title":{},"body":{"index.html":{}}}],["multi",{"_index":281,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["multipe",{"_index":184,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["n",{"_index":188,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["name",{"_index":52,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/development-log.html":{}}}],["need",{"_index":387,"title":{},"body":{"index.html":{}}}],["needs",{"_index":440,"title":{},"body":{"index.html":{}}}],["new",{"_index":78,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["nodejs",{"_index":480,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["notice",{"_index":351,"title":{},"body":{"miscellaneous/functions.html":{}}}],["npm",{"_index":379,"title":{},"body":{"index.html":{},"additional-documentation/development-log.html":{}}}],["object",{"_index":39,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/functions.html":{},"index.html":{},"additional-documentation/development-log.html":{}}}],["object.keys(paramsdefault).map((key",{"_index":91,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["object.keys(projects",{"_index":454,"title":{},"body":{"miscellaneous/variables.html":{}}}],["objects",{"_index":276,"title":{},"body":{"miscellaneous/functions.html":{}}}],["octokit/auth",{"_index":230,"title":{},"body":{"dependencies.html":{},"additional-documentation/development-log.html":{}}}],["octokit/rest",{"_index":233,"title":{},"body":{"dependencies.html":{},"additional-documentation/development-log.html":{}}}],["ommit",{"_index":434,"title":{},"body":{"index.html":{}}}],["option",{"_index":424,"title":{},"body":{"index.html":{}}}],["optional",{"_index":195,"title":{},"body":{"interfaces/Params.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":417,"title":{},"body":{"index.html":{}}}],["original",{"_index":320,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["outdir",{"_index":498,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["outfile",{"_index":54,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"additional-documentation/development-log.html":{}}}],["output",{"_index":57,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/functions.html":{},"index.html":{},"additional-documentation/development-log.html":{}}}],["outputdir",{"_index":56,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/development-log.html":{}}}],["outputdir:string",{"_index":519,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["outputdir:string):promise",{"_index":452,"title":{},"body":{"miscellaneous/variables.html":{}}}],["outputdir['output",{"_index":154,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["outputfile",{"_index":61,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/development-log.html":{}}}],["outputfile:string",{"_index":520,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["outputfile['output",{"_index":156,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["overview",{"_index":444,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwritten",{"_index":522,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["package",{"_index":228,"title":{"dependencies.html":{}},"body":{}}],["package.json",{"_index":490,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["page",{"_index":63,"title":{"additional-documentation/development-log.html":{},"additional-documentation/issues.html":{}},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"index.html":{},"additional-documentation/development-log.html":{}}}],["parameter",{"_index":295,"title":{},"body":{"miscellaneous/functions.html":{}}}],["parameters",{"_index":84,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["parameters:\\n",{"_index":186,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["params",{"_index":8,"title":{"interfaces/Params.html":{}},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["params.copyprojectsdocs",{"_index":132,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["params.outputdir",{"_index":109,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["params.outputfile",{"_index":110,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["params.projectsdocsdir",{"_index":106,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["params.projectsfile",{"_index":105,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["params.repodir",{"_index":104,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["params.templatefile",{"_index":108,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["params.templatesdir",{"_index":107,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["params[key",{"_index":92,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["paramsdefault",{"_index":67,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["paramsdefault[key",{"_index":94,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["part",{"_index":325,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["partiually",{"_index":329,"title":{},"body":{"miscellaneous/functions.html":{}}}],["path",{"_index":24,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/functions.html":{},"index.html":{},"additional-documentation/development-log.html":{}}}],["path.join",{"_index":69,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["path.join(string(params.repodir",{"_index":165,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["path.join(string(params.templatesdir",{"_index":173,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["please",{"_index":142,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["points",{"_index":437,"title":{},"body":{"index.html":{}}}],["possibility",{"_index":422,"title":{},"body":{"index.html":{}}}],["potiéntial",{"_index":327,"title":{},"body":{"miscellaneous/functions.html":{}}}],["preparation",{"_index":493,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["prepared",{"_index":321,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prepares",{"_index":317,"title":{},"body":{"miscellaneous/functions.html":{}}}],["prerequisites",{"_index":479,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["prerequists",{"_index":382,"title":{},"body":{"index.html":{}}}],["process",{"_index":297,"title":{},"body":{"miscellaneous/functions.html":{}}}],["program",{"_index":428,"title":{},"body":{"index.html":{}}}],["project",{"_index":275,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"additional-documentation/development-log.html":{}}}],["project's",{"_index":330,"title":{},"body":{"miscellaneous/functions.html":{}}}],["project(s",{"_index":343,"title":{},"body":{"miscellaneous/functions.html":{}}}],["project/application",{"_index":485,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["projectname",{"_index":324,"title":{},"body":{"miscellaneous/functions.html":{}}}],["projects",{"_index":40,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/development-log.html":{}}}],["projects:any",{"_index":448,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects[key",{"_index":457,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projects[key].reference",{"_index":460,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projectsdocsdir",{"_index":43,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["projectsdocsdir:string",{"_index":450,"title":{},"body":{"miscellaneous/variables.html":{}}}],["projectsdocsdir['projects",{"_index":149,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["projectsfile",{"_index":36,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/development-log.html":{}}}],["projectsfile:string",{"_index":516,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["projectsfile['projects",{"_index":146,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["promise",{"_index":76,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["promise((resolve",{"_index":79,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["promise.all(keys.map((key:string",{"_index":455,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties",{"_index":10,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["property",{"_index":273,"title":{},"body":{"miscellaneous/functions.html":{}}}],["provides",{"_index":421,"title":{},"body":{"index.html":{}}}],["pu.args",{"_index":464,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pu.askparams(params",{"_index":468,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pu.initparams(args.configfile",{"_index":465,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pu.writeparams(params",{"_index":471,"title":{},"body":{"miscellaneous/variables.html":{}}}],["purpose",{"_index":274,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"additional-documentation/development-log.html":{}}}],["purpose/brief",{"_index":308,"title":{},"body":{"miscellaneous/functions.html":{}}}],["quick",{"_index":388,"title":{},"body":{"index.html":{}}}],["read",{"_index":86,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["readme.md",{"_index":305,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["readmefile",{"_index":347,"title":{},"body":{"miscellaneous/functions.html":{}}}],["reads",{"_index":345,"title":{},"body":{"miscellaneous/functions.html":{}}}],["real",{"_index":391,"title":{},"body":{"index.html":{}}}],["redirect",{"_index":500,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["reference",{"_index":334,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["references[index",{"_index":461,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reject",{"_index":158,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["reject(new",{"_index":189,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["repo",{"_index":35,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/functions.html":{},"index.html":{},"additional-documentation/development-log.html":{}}}],["repocod",{"_index":429,"title":{},"body":{"index.html":{}}}],["repodir",{"_index":33,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/development-log.html":{}}}],["repodir:string",{"_index":451,"title":{},"body":{"miscellaneous/variables.html":{},"additional-documentation/development-log.html":{}}}],["repodir['repository",{"_index":143,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["repodoc",{"_index":60,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/development-log.html":{}}}],["repodoc's",{"_index":419,"title":{},"body":{"index.html":{}}}],["repodoc.json",{"_index":418,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["repodoc\\index.html",{"_index":414,"title":{},"body":{"index.html":{}}}],["repodoccommit",{"_index":405,"title":{},"body":{"index.html":{}}}],["repository",{"_index":136,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"index.html":{}}}],["resides",{"_index":282,"title":{},"body":{"miscellaneous/functions.html":{}}}],["resolve(params",{"_index":95,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["resolve(paramsdefault",{"_index":88,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["resolve(projects",{"_index":462,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resp",{"_index":341,"title":{},"body":{"miscellaneous/functions.html":{}}}],["result",{"_index":192,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{},"additional-documentation/development-log.html":{},"additional-documentation/issues.html":{}}}],["results",{"_index":194,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{},"additional-documentation/development-log.html":{},"additional-documentation/issues.html":{}}}],["return",{"_index":77,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":283,"title":{},"body":{"miscellaneous/functions.html":{}}}],["root",{"_index":331,"title":{},"body":{"miscellaneous/functions.html":{},"additional-documentation/development-log.html":{}}}],["rootdir",{"_index":501,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["rpd.ts",{"_index":528,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["run",{"_index":386,"title":{},"body":{"index.html":{}}}],["s",{"_index":183,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["saved",{"_index":413,"title":{},"body":{"index.html":{}}}],["see",{"_index":442,"title":{},"body":{"index.html":{}}}],["set",{"_index":438,"title":{},"body":{"index.html":{}}}],["show",{"_index":408,"title":{},"body":{"index.html":{}}}],["simple",{"_index":259,"title":{},"body":{"dependencies.html":{},"additional-documentation/development-log.html":{}}}],["skip",{"_index":426,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["sourcetext",{"_index":306,"title":{},"body":{"miscellaneous/functions.html":{}}}],["specify",{"_index":503,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["src",{"_index":502,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["src/.../docutils.ts",{"_index":268,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../fsutils.ts",{"_index":270,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../paramsutils.ts",{"_index":269,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../repodoc.ts",{"_index":447,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/docutils.ts",{"_index":199,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/fsutils.ts",{"_index":213,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/paramsutils.ts",{"_index":6,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/paramsutils.ts:24",{"_index":18,"title":{},"body":{"interfaces/Args.html":{}}}],["src/repodoc.ts",{"_index":224,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["srcinstall",{"_index":510,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["standard",{"_index":147,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"index.html":{}}}],["start",{"_index":389,"title":{},"body":{"index.html":{}}}],["started",{"_index":369,"title":{"index.html":{}},"body":{}}],["statements",{"_index":198,"title":{},"body":{"coverage.html":{}}}],["strict",{"_index":111,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["string",{"_index":15,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["string(params.outputdir",{"_index":177,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["string(params.outputfile",{"_index":180,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["string(params.projectsfile",{"_index":163,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["string(params.projectsfile))}'does",{"_index":166,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["string(params.repodir",{"_index":162,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["string(params.templatefile",{"_index":171,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["string(params.templatefile))}'does",{"_index":174,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["string(params.templatesdir",{"_index":170,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["stripped",{"_index":395,"title":{},"body":{"index.html":{}}}],["structure",{"_index":280,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"additional-documentation/development-log.html":{}}}],["summarized",{"_index":58,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"index.html":{},"additional-documentation/development-log.html":{}}}],["table",{"_index":227,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":226,"title":{},"body":{"coverage.html":{}}}],["template",{"_index":49,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/functions.html":{},"index.html":{},"additional-documentation/development-log.html":{}}}],["templatedir",{"_index":527,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["templatefile",{"_index":51,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/development-log.html":{}}}],["templatefile:string",{"_index":518,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["templatefile['template",{"_index":152,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["templates",{"_index":71,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{},"additional-documentation/development-log.html":{}}}],["templatesdir",{"_index":48,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/development-log.html":{}}}],["templatesdir:string",{"_index":517,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["templatesdir['templates",{"_index":150,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["test",{"_index":390,"title":{},"body":{"index.html":{}}}],["text",{"_index":302,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["then((references:string",{"_index":458,"title":{},"body":{"miscellaneous/variables.html":{}}}],["then(du.createdoc",{"_index":473,"title":{},"body":{"miscellaneous/variables.html":{}}}],["then(params",{"_index":467,"title":{},"body":{"miscellaneous/variables.html":{}}}],["then(pu.updateparamswithargs",{"_index":466,"title":{},"body":{"miscellaneous/variables.html":{}}}],["then(pu.validateparams",{"_index":470,"title":{},"body":{"miscellaneous/variables.html":{}}}],["theses",{"_index":402,"title":{},"body":{"index.html":{}}}],["three",{"_index":396,"title":{},"body":{"index.html":{}}}],["throws",{"_index":309,"title":{},"body":{"miscellaneous/functions.html":{}}}],["todo",{"_index":72,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["touch",{"_index":262,"title":{},"body":{"dependencies.html":{},"additional-documentation/development-log.html":{}}}],["touchinstall",{"_index":513,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["trial",{"_index":401,"title":{},"body":{"index.html":{}}}],["true",{"_index":68,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":89,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["tsc",{"_index":496,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["tsconfig.ts",{"_index":495,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["two",{"_index":403,"title":{},"body":{"index.html":{}}}],["type",{"_index":20,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{},"additional-documentation/development-log.html":{}}}],["types/clear",{"_index":235,"title":{},"body":{"dependencies.html":{},"additional-documentation/development-log.html":{}}}],["types/figlet",{"_index":237,"title":{},"body":{"dependencies.html":{},"additional-documentation/development-log.html":{}}}],["types/inquirer",{"_index":239,"title":{},"body":{"dependencies.html":{}}}],["types/inquirerfurther",{"_index":514,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["types/yargs",{"_index":241,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":481,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["undefined",{"_index":93,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["unknown",{"_index":16,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["unneeded",{"_index":392,"title":{},"body":{"index.html":{}}}],["unusable",{"_index":352,"title":{},"body":{"miscellaneous/functions.html":{}}}],["updateparamswithargs",{"_index":99,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["use",{"_index":504,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["uses",{"_index":385,"title":{},"body":{"index.html":{},"additional-documentation/development-log.html":{}}}],["usually",{"_index":303,"title":{},"body":{"miscellaneous/functions.html":{}}}],["valid",{"_index":97,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{},"additional-documentation/development-log.html":{}}}],["validate",{"_index":139,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["validateparams",{"_index":157,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["value",{"_index":140,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":211,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":446,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":492,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["want",{"_index":134,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["way",{"_index":342,"title":{},"body":{"miscellaneous/functions.html":{}}}],["withcreate",{"_index":506,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["within",{"_index":289,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["without",{"_index":406,"title":{},"body":{"index.html":{}}}],["works",{"_index":383,"title":{},"body":{"index.html":{}}}],["write",{"_index":118,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["writehtmlfile",{"_index":210,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["writehtmlfile(htmlstring",{"_index":356,"title":{},"body":{"miscellaneous/functions.html":{}}}],["writeparams",{"_index":114,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["writes",{"_index":357,"title":{},"body":{"miscellaneous/functions.html":{}}}],["written",{"_index":360,"title":{},"body":{"miscellaneous/functions.html":{}}}],["x",{"_index":14,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{}}}],["yadopt",{"_index":489,"title":{},"body":{"additional-documentation/development-log.html":{}}}],["yapp.json",{"_index":101,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}],["yargs",{"_index":27,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"dependencies.html":{}}}],["yargs.options",{"_index":100,"title":{},"body":{"interfaces/Args.html":{},"interfaces/Params.html":{},"miscellaneous/variables.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/Args.html":{"url":"interfaces/Args.html","title":"interface - Args","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Args\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/paramsUtils.ts\n        \n\n\n            \n                Extends\n            \n            \n                        Params\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        askParams\n                                \n                                \n                                        configFile\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [x: string]:    unknown\n\n                    \n                \n                        \n                            \n                                Defined in src/paramsUtils.ts:24\n                            \n                        \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        askParams\n                                    \n                                \n                                \n                                    \n                                        askParams:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        configFile\n                                    \n                                \n                                \n                                    \n                                        configFile:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import fs from 'fs';\nimport path from 'path';\n\nimport chalk from 'chalk';\nimport figlet from 'figlet';\n\nimport yargs from 'yargs';\nimport inquirer from 'inquirer';\n\nimport * as fsu from './fsUtils';\n\nexport interface Params {\n  configFile?: string\n  copyProjectsDocs: boolean\n  repoDir?: string // path to mono repo\n  projectsFile?: string // path to the file which contains the JSON object 'projects' (default angular.json)\n  projectsDocsDir?: string // path to app's docs directory (default compodoc)\n  templatesDir?: string // path to template file(s) (default template)\n  templateFile?: string // template file name for creating outfile (default index.hbs)\n  outputDir?: string // path to output directory for summarized documentation (default repodoc)\n  outputFile?: string // path to landing page of summarized documentation to be created (default index.html)\n}\n\nexport interface Args extends Params {\n  [x: string]: unknown\n  configFile: string\n  askParams: boolean\n}\n\nexport const paramsDefault: Params = {\n  copyProjectsDocs: true,\n  repoDir: path.join('.', 'example'),\n  projectsFile: \"angular.json\",\n  projectsDocsDir: \"compodoc\",\n  templatesDir: path.join('.', 'templates'),\n  templateFile: \"index.hbs\",\n  outputDir: path.join('.', 'repodoc'),\n  outputFile: \"index.html\"\n}\n\n// TODO: internalize paramsDefault\nexport const initParams = function (configFile: string): Promise {\n  return new Promise((resolve) => {\n    fs.readFile(configFile, (error: any, data: any) => {\n      if (error) {\n        console.warn(`using default parameters due to cannot read file ${configFile} due to ${error.message}`);\n        resolve(paramsDefault)\n        return\n      }\n      try {\n        let params: Params = JSON.parse(data.toString());\n        Object.keys(paramsDefault).map((key: string) => {\n          if (params[key] === undefined) {\n            params[key] = paramsDefault[key]\n          }\n        });\n        resolve(params);\n      } catch (error) {\n        console.warn(`using default parameters due to file ${configFile} not a valid configuration file`);\n        resolve(paramsDefault)\n      }\n    })\n  })\n}\n\nexport const updateParamsWithArgs = function (params: Params): Promise {\n\n  return new Promise((resolve) => {\n    const args: Args = yargs.options({\n      configFile: { type: 'string', default: \"yapp.json\", alias: \"c\" },\n      askParams: { type: 'boolean', default: true, alias: \"a\" },\n      copyProjectsDocs: { type: 'boolean', default: true },\n      repoDir: { type: 'string', default: params.repoDir },\n      projectsFile: { type: 'string', default: params.projectsFile },\n      projectsDocsDir: { type: 'string', default: params.projectsDocsDir },\n      templatesDir: { type: 'string', default: params.templatesDir },\n      templateFile: { type: 'string', default: params.templateFile },\n      outputDir: { type: 'string', default: params.outputDir },\n      outputFile: { type: 'string', default: params.outputFile }\n    }).strict()\n      .argv\n\n    Object.keys(paramsDefault).map((key: string) => params[key] = args[key]);\n\n    resolve(params);\n\n  })\n}\n\nexport const writeParams = function (params: Params, configFile: string): Promise {\n\n  return new Promise((resolve) => {\n    fs.writeFile(configFile, JSON.stringify(params), (error: any) => {\n      if (error) {\n        console.warn(`cannot write config file ${configFile} due to ${error.message}`);\n      }\n      resolve(params);\n    })\n  })\n}\n\nexport async function askParams(params: Params, askParams: boolean) {\n\n  if (!askParams) return params;\n\n  console.clear();\n\n  console.log(\n      chalk.cyanBright(\n        figlet.textSync('Repodoc', { horizontalLayout: 'full' })\n      )\n    );\n\n    const copyProjectsDocs = await inquirer.prompt({\n      name: 'copy projects docs',\n      type: 'confirm',\n      default: params.copyProjectsDocs,\n      message: 'Do you want to copy projects docs?:',\n    })\n    params.copyProjectsDocs = copyProjectsDocs['copy projects docs'];\n  \n\n\n  const repoDir = await inquirer.prompt({\n    name: 'repository directory',\n    type: 'input',\n    default: params.repoDir,\n    message: 'Enter your repository directory:',\n    validate: function (value: string) {\n      if (fsu.dirExists(value)) {\n        return true;\n      } else {\n        return 'Please enter a valid repository directory:';\n      }\n    }\n  })\n  params.repoDir = repoDir['repository directory'];\n\n  const projectsFile = await inquirer.prompt({\n    name: 'projects file',\n    type: 'input',\n    default: params.projectsFile,\n    message: 'Enter your projects file:',\n    validate: function (value: string) {\n      if (fsu.fileExists(path.join(String(params.repoDir), value))) {\n        return true;\n      } else {\n        return 'Please enter an existing projects file:';\n      }\n    }\n  })\n  params.projectsFile = projectsFile['projects file'];\n\n  const projectsDocsDir = await inquirer.prompt({\n    name: 'projects docs directory',\n    type: 'input',\n    default: params.projectsDocsDir,\n    message: 'Enter the standard docs directory of projects:',\n    validate: function (value: string) {\n      if (fsu.isValidDirectoryName(value)) {\n        return true;\n      } else {\n        return 'Please enter an existing projects file:';\n      }\n    }\n  })\n  params.projectsDocsDir = projectsDocsDir['projects docs directory'];\n\n  const templatesDir = await inquirer.prompt({\n    name: 'templates directory',\n    type: 'input',\n    default: params.templatesDir,\n    message: 'Enter your templates directory:',\n    validate: function (value: string) {\n      if (fsu.isValidDirectoryName(value)) {\n        return true;\n      } else {\n        return 'Please enter a valid directory name:';\n      }\n    }\n  })\n  params.templatesDir = templatesDir['templates directory'];\n\n  const templateFile = await inquirer.prompt({\n    name: 'template file',\n    type: 'input',\n    default: params.templateFile,\n    message: 'Enter your template file:',\n    validate: function (value: string) {\n      if (fsu.fileExists(path.join(String(params.templatesDir), value))) {\n        return true;\n      } else {\n        return 'Please enter an existing template file:';\n      }\n    }\n  })\n  params.templateFile = templateFile['template file'];\n\n  const outputDir = await inquirer.prompt({\n    name: 'output directory',\n    type: 'input',\n    default: params.outputDir,\n    message: 'Enter your output directory:',\n    validate: function (value: string) {\n      if (fsu.dirCreate(value)) {\n        return true;\n      } else {\n        return 'Please enter a valid output directory:';\n      }\n    }\n  })\n  params.outputDir = outputDir['output directory'];\n\n  const outputFile = await inquirer.prompt({\n    name: 'output file',\n    type: 'input',\n    default: params.outputFile,\n    message: 'Enter your output file:',\n    validate: function (value: string) {\n      if (fsu.isValidFilename(value)) {\n        return true;\n      } else {\n        return 'Please enter a valid file name:';\n      }\n    }\n  })\n  params.outputFile = outputFile['output file'];\n\n  return params;\n}\n\nexport const validateParams = function (params: Params): Promise {\n\n  return new Promise((resolve, reject) => {\n\n    let errors:string[] = [];\n\n    if (!fsu.dirExists(String(params.repoDir))) {\n      errors.push(`repository directory '${String(params.repoDir)}' is not valid`);\n    } else {\n      if (!fsu.fileExists(path.join(String(params.repoDir), String(params.projectsFile)))) {\n        errors.push(`projects file '${path.join(String(params.repoDir), String(params.projectsFile))}'does not exists`);\n      }\n    }\n\n    if (!fsu.dirExists(String(params.templatesDir))) {\n      errors.push(`templates directory '${String(params.templatesDir)}' is not valid`);\n    } else {\n      if (!fsu.fileExists(path.join(String(params.templatesDir), String(params.templateFile)))) {\n        errors.push(`template file '${path.join(String(params.templatesDir), String(params.templateFile))}'does not exists`);\n      }\n    }\n\n    if (!fsu.dirCreate(String(params.outputDir))) {\n      errors.push(`output directory '${String(params.outputDir)}' is not valid`);\n    }\n\n    if (!fsu.isValidFilename(String(params.outputFile))) {\n      errors.push(`outputfile name '${String(params.outputFile)}' is not valid`);\n    }\n\n    if (errors.length>0){\n      if (errors.length>1){\n        let s = \"multipe errors in parameters:\\n\";\n        errors.forEach((error) => s += '- ' + error + '\\n')\n        reject(new Error(s));\n      }else{\n        reject(new Error(errors.toString()));\n      }\n    }else{\n      resolve(params); \n    }\n  })\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Params.html":{"url":"interfaces/Params.html","title":"interface - Params","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  Params\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/paramsUtils.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        configFile\n                                \n                                \n                                        copyProjectsDocs\n                                \n                                \n                                            Optional\n                                        outputDir\n                                \n                                \n                                            Optional\n                                        outputFile\n                                \n                                \n                                            Optional\n                                        projectsDocsDir\n                                \n                                \n                                            Optional\n                                        projectsFile\n                                \n                                \n                                            Optional\n                                        repoDir\n                                \n                                \n                                            Optional\n                                        templateFile\n                                \n                                \n                                            Optional\n                                        templatesDir\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        configFile\n                                    \n                                \n                                \n                                    \n                                        configFile:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        copyProjectsDocs\n                                    \n                                \n                                \n                                    \n                                        copyProjectsDocs:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        outputDir\n                                    \n                                \n                                \n                                    \n                                        outputDir:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        outputFile\n                                    \n                                \n                                \n                                    \n                                        outputFile:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        projectsDocsDir\n                                    \n                                \n                                \n                                    \n                                        projectsDocsDir:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        projectsFile\n                                    \n                                \n                                \n                                    \n                                        projectsFile:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        repoDir\n                                    \n                                \n                                \n                                    \n                                        repoDir:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        templateFile\n                                    \n                                \n                                \n                                    \n                                        templateFile:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        templatesDir\n                                    \n                                \n                                \n                                    \n                                        templatesDir:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import fs from 'fs';\nimport path from 'path';\n\nimport chalk from 'chalk';\nimport figlet from 'figlet';\n\nimport yargs from 'yargs';\nimport inquirer from 'inquirer';\n\nimport * as fsu from './fsUtils';\n\nexport interface Params {\n  configFile?: string\n  copyProjectsDocs: boolean\n  repoDir?: string // path to mono repo\n  projectsFile?: string // path to the file which contains the JSON object 'projects' (default angular.json)\n  projectsDocsDir?: string // path to app's docs directory (default compodoc)\n  templatesDir?: string // path to template file(s) (default template)\n  templateFile?: string // template file name for creating outfile (default index.hbs)\n  outputDir?: string // path to output directory for summarized documentation (default repodoc)\n  outputFile?: string // path to landing page of summarized documentation to be created (default index.html)\n}\n\nexport interface Args extends Params {\n  [x: string]: unknown\n  configFile: string\n  askParams: boolean\n}\n\nexport const paramsDefault: Params = {\n  copyProjectsDocs: true,\n  repoDir: path.join('.', 'example'),\n  projectsFile: \"angular.json\",\n  projectsDocsDir: \"compodoc\",\n  templatesDir: path.join('.', 'templates'),\n  templateFile: \"index.hbs\",\n  outputDir: path.join('.', 'repodoc'),\n  outputFile: \"index.html\"\n}\n\n// TODO: internalize paramsDefault\nexport const initParams = function (configFile: string): Promise {\n  return new Promise((resolve) => {\n    fs.readFile(configFile, (error: any, data: any) => {\n      if (error) {\n        console.warn(`using default parameters due to cannot read file ${configFile} due to ${error.message}`);\n        resolve(paramsDefault)\n        return\n      }\n      try {\n        let params: Params = JSON.parse(data.toString());\n        Object.keys(paramsDefault).map((key: string) => {\n          if (params[key] === undefined) {\n            params[key] = paramsDefault[key]\n          }\n        });\n        resolve(params);\n      } catch (error) {\n        console.warn(`using default parameters due to file ${configFile} not a valid configuration file`);\n        resolve(paramsDefault)\n      }\n    })\n  })\n}\n\nexport const updateParamsWithArgs = function (params: Params): Promise {\n\n  return new Promise((resolve) => {\n    const args: Args = yargs.options({\n      configFile: { type: 'string', default: \"yapp.json\", alias: \"c\" },\n      askParams: { type: 'boolean', default: true, alias: \"a\" },\n      copyProjectsDocs: { type: 'boolean', default: true },\n      repoDir: { type: 'string', default: params.repoDir },\n      projectsFile: { type: 'string', default: params.projectsFile },\n      projectsDocsDir: { type: 'string', default: params.projectsDocsDir },\n      templatesDir: { type: 'string', default: params.templatesDir },\n      templateFile: { type: 'string', default: params.templateFile },\n      outputDir: { type: 'string', default: params.outputDir },\n      outputFile: { type: 'string', default: params.outputFile }\n    }).strict()\n      .argv\n\n    Object.keys(paramsDefault).map((key: string) => params[key] = args[key]);\n\n    resolve(params);\n\n  })\n}\n\nexport const writeParams = function (params: Params, configFile: string): Promise {\n\n  return new Promise((resolve) => {\n    fs.writeFile(configFile, JSON.stringify(params), (error: any) => {\n      if (error) {\n        console.warn(`cannot write config file ${configFile} due to ${error.message}`);\n      }\n      resolve(params);\n    })\n  })\n}\n\nexport async function askParams(params: Params, askParams: boolean) {\n\n  if (!askParams) return params;\n\n  console.clear();\n\n  console.log(\n      chalk.cyanBright(\n        figlet.textSync('Repodoc', { horizontalLayout: 'full' })\n      )\n    );\n\n    const copyProjectsDocs = await inquirer.prompt({\n      name: 'copy projects docs',\n      type: 'confirm',\n      default: params.copyProjectsDocs,\n      message: 'Do you want to copy projects docs?:',\n    })\n    params.copyProjectsDocs = copyProjectsDocs['copy projects docs'];\n  \n\n\n  const repoDir = await inquirer.prompt({\n    name: 'repository directory',\n    type: 'input',\n    default: params.repoDir,\n    message: 'Enter your repository directory:',\n    validate: function (value: string) {\n      if (fsu.dirExists(value)) {\n        return true;\n      } else {\n        return 'Please enter a valid repository directory:';\n      }\n    }\n  })\n  params.repoDir = repoDir['repository directory'];\n\n  const projectsFile = await inquirer.prompt({\n    name: 'projects file',\n    type: 'input',\n    default: params.projectsFile,\n    message: 'Enter your projects file:',\n    validate: function (value: string) {\n      if (fsu.fileExists(path.join(String(params.repoDir), value))) {\n        return true;\n      } else {\n        return 'Please enter an existing projects file:';\n      }\n    }\n  })\n  params.projectsFile = projectsFile['projects file'];\n\n  const projectsDocsDir = await inquirer.prompt({\n    name: 'projects docs directory',\n    type: 'input',\n    default: params.projectsDocsDir,\n    message: 'Enter the standard docs directory of projects:',\n    validate: function (value: string) {\n      if (fsu.isValidDirectoryName(value)) {\n        return true;\n      } else {\n        return 'Please enter an existing projects file:';\n      }\n    }\n  })\n  params.projectsDocsDir = projectsDocsDir['projects docs directory'];\n\n  const templatesDir = await inquirer.prompt({\n    name: 'templates directory',\n    type: 'input',\n    default: params.templatesDir,\n    message: 'Enter your templates directory:',\n    validate: function (value: string) {\n      if (fsu.isValidDirectoryName(value)) {\n        return true;\n      } else {\n        return 'Please enter a valid directory name:';\n      }\n    }\n  })\n  params.templatesDir = templatesDir['templates directory'];\n\n  const templateFile = await inquirer.prompt({\n    name: 'template file',\n    type: 'input',\n    default: params.templateFile,\n    message: 'Enter your template file:',\n    validate: function (value: string) {\n      if (fsu.fileExists(path.join(String(params.templatesDir), value))) {\n        return true;\n      } else {\n        return 'Please enter an existing template file:';\n      }\n    }\n  })\n  params.templateFile = templateFile['template file'];\n\n  const outputDir = await inquirer.prompt({\n    name: 'output directory',\n    type: 'input',\n    default: params.outputDir,\n    message: 'Enter your output directory:',\n    validate: function (value: string) {\n      if (fsu.dirCreate(value)) {\n        return true;\n      } else {\n        return 'Please enter a valid output directory:';\n      }\n    }\n  })\n  params.outputDir = outputDir['output directory'];\n\n  const outputFile = await inquirer.prompt({\n    name: 'output file',\n    type: 'input',\n    default: params.outputFile,\n    message: 'Enter your output file:',\n    validate: function (value: string) {\n      if (fsu.isValidFilename(value)) {\n        return true;\n      } else {\n        return 'Please enter a valid file name:';\n      }\n    }\n  })\n  params.outputFile = outputFile['output file'];\n\n  return params;\n}\n\nexport const validateParams = function (params: Params): Promise {\n\n  return new Promise((resolve, reject) => {\n\n    let errors:string[] = [];\n\n    if (!fsu.dirExists(String(params.repoDir))) {\n      errors.push(`repository directory '${String(params.repoDir)}' is not valid`);\n    } else {\n      if (!fsu.fileExists(path.join(String(params.repoDir), String(params.projectsFile)))) {\n        errors.push(`projects file '${path.join(String(params.repoDir), String(params.projectsFile))}'does not exists`);\n      }\n    }\n\n    if (!fsu.dirExists(String(params.templatesDir))) {\n      errors.push(`templates directory '${String(params.templatesDir)}' is not valid`);\n    } else {\n      if (!fsu.fileExists(path.join(String(params.templatesDir), String(params.templateFile)))) {\n        errors.push(`template file '${path.join(String(params.templatesDir), String(params.templateFile))}'does not exists`);\n      }\n    }\n\n    if (!fsu.dirCreate(String(params.outputDir))) {\n      errors.push(`output directory '${String(params.outputDir)}' is not valid`);\n    }\n\n    if (!fsu.isValidFilename(String(params.outputFile))) {\n      errors.push(`outputfile name '${String(params.outputFile)}' is not valid`);\n    }\n\n    if (errors.length>0){\n      if (errors.length>1){\n        let s = \"multipe errors in parameters:\\n\";\n        errors.forEach((error) => s += '- ' + error + '\\n')\n        reject(new Error(s));\n      }else{\n        reject(new Error(errors.toString()));\n      }\n    }else{\n      resolve(params); \n    }\n  })\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/docUtils.ts\n            \n            function\n            addPurposes\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/docUtils.ts\n            \n            function\n            createDoc\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/docUtils.ts\n            \n            function\n            extractPurpose\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/docUtils.ts\n            \n            function\n            fetchProjectDocs\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/docUtils.ts\n            \n            function\n            getHtmlString\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/docUtils.ts\n            \n            function\n            getProjects\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/docUtils.ts\n            \n            function\n            getPurpose\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/docUtils.ts\n            \n            function\n            getTemplate\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/docUtils.ts\n            \n            function\n            writeHtmlFile\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/docUtils.ts\n            \n            variable\n            fetchProjectsDocs\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/fsUtils.ts\n            \n            function\n            dirCreate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/fsUtils.ts\n            \n            function\n            dirExists\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/fsUtils.ts\n            \n            function\n            fileExists\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/fsUtils.ts\n            \n            function\n            getCWD\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/fsUtils.ts\n            \n            function\n            isValidDirectoryName\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/fsUtils.ts\n            \n            function\n            isValidFilename\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/paramsUtils.ts\n            \n            interface\n            Args\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/paramsUtils.ts\n            \n            interface\n            Params\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/paramsUtils.ts\n            \n            function\n            askParams\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/paramsUtils.ts\n            \n            variable\n            initParams\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/paramsUtils.ts\n            \n            variable\n            paramsDefault\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/paramsUtils.ts\n            \n            variable\n            updateParamsWithArgs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/paramsUtils.ts\n            \n            variable\n            validateParams\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/paramsUtils.ts\n            \n            variable\n            writeParams\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/repodoc.ts\n            \n            variable\n            main\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @octokit/auth-basic : ^1.4.5\n        \n            @octokit/rest : ^18.0.0\n        \n            @types/clear : ^0.1.0\n        \n            @types/figlet : ^1.2.0\n        \n            @types/inquirer : ^6.5.0\n        \n            @types/yargs : ^15.0.5\n        \n            chalk : ^4.1.0\n        \n            clear : ^0.1.0\n        \n            clui : ^0.3.6\n        \n            configstore : ^5.0.1\n        \n            figlet : ^1.4.0\n        \n            fs-extra : ^9.0.1\n        \n            handlebars : ^4.7.6\n        \n            inquirer : ^7.2.0\n        \n            lodash : ^4.17.15\n        \n            minimist : ^1.2.5\n        \n            simple-git : ^2.6.0\n        \n            touch : ^3.1.0\n        \n            valid-filename : ^3.1.0\n        \n            yargs : ^15.3.1\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            addPurposes   (src/.../docUtils.ts)\n                        \n                        \n                            askParams   (src/.../paramsUtils.ts)\n                        \n                        \n                            createDoc   (src/.../docUtils.ts)\n                        \n                        \n                            dirCreate   (src/.../fsUtils.ts)\n                        \n                        \n                            dirExists   (src/.../fsUtils.ts)\n                        \n                        \n                            extractPurpose   (src/.../docUtils.ts)\n                        \n                        \n                            fetchProjectDocs   (src/.../docUtils.ts)\n                        \n                        \n                            fileExists   (src/.../fsUtils.ts)\n                        \n                        \n                            getCWD   (src/.../fsUtils.ts)\n                        \n                        \n                            getHtmlString   (src/.../docUtils.ts)\n                        \n                        \n                            getProjects   (src/.../docUtils.ts)\n                        \n                        \n                            getPurpose   (src/.../docUtils.ts)\n                        \n                        \n                            getTemplate   (src/.../docUtils.ts)\n                        \n                        \n                            isValidDirectoryName   (src/.../fsUtils.ts)\n                        \n                        \n                            isValidFilename   (src/.../fsUtils.ts)\n                        \n                        \n                            writeHtmlFile   (src/.../docUtils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/docUtils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            addPurposes\n                        \n                        \n                    \n                \n            \n            \n                \naddPurposes(projects: any, repoDir)\n                \n            \n\n\n\n\n            \n                \n                    Adds a property 'purpose' to all project objects\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    projects\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        an object with enumerable string objects (an object for each project, angular.json structure)\n\n                                    \n                                \n                                \n                                    repoDir\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        mono repo directory (, where the multi project project resides)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        the projects input object enriched with 'purpose' property for each project\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createDoc\n                        \n                        \n                    \n                \n            \n            \n                \ncreateDoc(params)\n                \n            \n\n\n\n\n            \n                \n                    Creates the html file with \n\ndescription of and \nlink to the docs of \n\nall projects within the monorepo.\nCopies the docs of all projects to the output directory, if desired.\nAPI of that module.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    params\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Parameter which controls the process   \n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            extractPurpose\n                        \n                        \n                    \n                \n            \n            \n                \nextractPurpose(sourceText)\n                \n            \n\n\n\n\n            \n                \n                    Extracts apps' brief description from a text (which usually comes from apps' readme.md).\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    sourceText\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The text the function extract the purpose/brief description from.   \n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        Apps' brief description (if exists)\nthrows an error if\n\nChapter '## Project Purpose' cannot be not found. (The chapter the description is being fetched from.)\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fetchProjectDocs\n                        \n                        \n                    \n                \n            \n            \n                \nfetchProjectDocs(projectName, project: any, copyProjectsDocs, projectsDocsDir, repoDir, outputDir)\n                \n            \n\n\n\n\n            \n                \n                    Copies app's doc, if desired (copyProjectsDocs=true)\nPrepares the link to app's docs. The link will \n\nlead to app's docs' copy, if a copy is desired/exists\nlead to original app's docs\nnot be prepared, docs of an app do not exist \n\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    projectName\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the project, is part of destination path of an potiéntial copy\n\n                                    \n                                \n                                \n                                    project\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Object with all project details, partiually project's root directory \nwith is part of destination path of an potiéntial copy\n\n                                    \n                                \n                                \n                                    copyProjectsDocs\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        true => function copies app's docs and lead the link to the copy\nfalse => function does not copy app's docs and lead the to the original app's docs \n\n                                    \n                                \n                                \n                                    projectsDocsDir\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    repoDir\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    outputDir\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        directory the app's docs will be copied to\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        reference to app's docs (e.g. projectName)\nprojectName, if there are no docs for an app or the docs cannot be copied\nthrows no errors \n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHtmlString\n                        \n                        \n                    \n                \n            \n            \n                \ngetHtmlString(template: any, projects: any)\n                \n            \n\n\n\n\n            \n                \n                    Compiles the html template\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    template\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        compile function\n\n                                    \n                                \n                                \n                                    projects\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        projects objects\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        object    the input object enriched with 'purpose' property for each project\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getProjects\n                        \n                        \n                    \n                \n            \n            \n                \ngetProjects(repoDir, projectsFile)\n                \n            \n\n\n\n\n            \n                \n                    Extracts all apps/projects from angular.json resp. from a file which contains projects the way angular.json contains.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    repoDir\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    projectsFile\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        projects with their details\nthrows an error if the file \n\ncannot be read\ncontains no valid JSON\ncontains no project(s)\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getPurpose\n                        \n                        \n                    \n                \n            \n            \n                \ngetPurpose(readmeFile)\n                \n            \n\n\n\n\n            \n                \n                    Reads the file (usually is apps' readme.md) containing apps' purpose/brief description\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    readmeFile\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Name of the file to be read   \n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Either \n\ncontent of the file read of   \n\n'no descrption due to missing file' notice, if the file cannot be read\n\n'no description due to ...' notice, if file has unusable content. *\n\n\nthrows no error(s)\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTemplate\n                        \n                        \n                    \n                \n            \n            \n                \ngetTemplate(templatesDir, templateFile)\n                \n            \n\n\n\n\n            \n                \n                    Reads the hbs template file and compiles it.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    templatesDir\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    templateFile\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        template creation function\nthrows an error if file \n\ncannot be read\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            writeHtmlFile\n                        \n                        \n                    \n                \n            \n            \n                \nwriteHtmlFile(htmlString, outputDir, outputFile)\n                \n            \n\n\n\n\n            \n                \n                    Writes the html code to a file\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    htmlString\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        html code\n\n                                    \n                                \n                                \n                                    outputDir\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        directory the output file will be written to\n\n                                    \n                                \n                                \n                                    outputFile\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        file the html code will be written to\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        notice 'html file is written to ...'\nthrows an error if\n\nfile cannot be written.\n\n\n                    \n                \n            \n        \n    \n    src/paramsUtils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            askParams\n                        \n                        \n                    \n                \n            \n            \n                \naskParams(params, askParams: boolean)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    params\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    askParams\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/fsUtils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            dirCreate\n                        \n                        \n                    \n                \n            \n            \n                \ndirCreate(filePath)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filePath\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            dirExists\n                        \n                        \n                    \n                \n            \n            \n                \ndirExists(filePath)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filePath\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            fileExists\n                        \n                        \n                    \n                \n            \n            \n                \nfileExists(filePath)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filePath\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCWD\n                        \n                        \n                    \n                \n            \n            \n                \ngetCWD()\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isValidDirectoryName\n                        \n                        \n                    \n                \n            \n            \n                \nisValidDirectoryName(dirName)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    dirName\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            isValidFilename\n                        \n                        \n                    \n                \n            \n            \n                \nisValidFilename(fileName)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    fileName\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nRepodoc\nRepodoc creates an app index for a (angular) monorepo/multiapp project. \nAssembles docs of all apps. \nFeatures\nRepodoc\n\nfinds the apps of a monorepo and their details within the angular.json of monorepo\nextracts the text of the chapter \"Project Purpose\" of the readme.md of each app\ncopies the app's docs (if desired)\ncreates an html file based on a handlebar template with a list of all apps containing\na link to app's docs (either copied docs or original docs)\napp's brief description (based its readme.md, there the text of the chapter 'Project Purpose')\n\n\n\nInstallation\nnpm install repodoc -gUsage\nPrerequists\nRepodoc works on a repository with a structure of standard angular multi projects repository. \nFor building the app index Repodoc uses a template file. \nSo, for getting Repodoc to run we need at least \n\na repository directory with multi projects and \n\na handlebars template file\n\n\nQuick Start\nRepodoc comes with test data\n\nThe directory 'example' is a real angular multi project repository (unneeded directories and files has been stripped)\nThe repository contains three projects: app01, app02 and app03.\napp01 and app03 have docs, but not app02.\n\nThe directory 'template' contains a template file \"index.hbs\"\n\n\nFor the first trial copy theses two directories into the directory you will start Repodoc in.\nStart repodoc just by entering\nrepodocCommit all parameters without any change.\nRepodoc will show following messages:\nexample\\projects\\app02\\compodoc does not exits\nhtml file saved to repodoc\\index.html\n\"example\\projects\\app02\\compodoc does not exits\" informs about the missing docs of app02.\nThe index.html contains a list of the three apps with \n\nreference to their docs (only for app01 and app03 due to missing docs of app02) \na brief description (\"purpose\")\nfurther details (from angular.json of the repo)\n\nOptions\nRepodoc uses the config file repodoc.json.\nrepodoc.json contains the parameters of Repodoc's last run.\nBy default Repodoc provides the possibility to change the parameters (--askParams=true is default).\nWith option --askParams=false you can skip the dialog part of the program start.\nBy default Repocod copies the doc's directories of the apps to the output directory where you find the generates index.html. (--copyProjectsDocs=true is default) \nWith option --copyProjectsDocs=false you can ommit the copying.\nThen, the apps' entries points to the original apps' docs.\nall directory and file parameters can be set as options. In detail:\n\nrepoDir              path to mono repo, needs to be an existant directory\nprojectsFile         name of the file which contains the JSON object 'projects' (see structure of angular.json of a mono repo) (default angular.json)\nprojectsDocsDir      path to app's docs directory, needs to be an existant directory (default compodoc)\ntemplatesDir         template file(s) directory, needs to be an existant directory (default template)\ntemplateFile         template file name for creating output file, needs to be an existant file (default index.hbs)\noutputDir            path to output directory for summarized documentation, needs to be a valid directory name,                  will be created if not exist (default repodoc)\noutputFile           name of the landing page file of summarized documentation, needs to be a valid file name (default index.html)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            fetchProjectsDocs   (src/.../docUtils.ts)\n                        \n                        \n                            initParams   (src/.../paramsUtils.ts)\n                        \n                        \n                            main   (src/.../repodoc.ts)\n                        \n                        \n                            paramsDefault   (src/.../paramsUtils.ts)\n                        \n                        \n                            updateParamsWithArgs   (src/.../paramsUtils.ts)\n                        \n                        \n                            validateParams   (src/.../paramsUtils.ts)\n                        \n                        \n                            writeParams   (src/.../paramsUtils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/docUtils.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            fetchProjectsDocs\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : function (projects:any, copyProjectsDocs:boolean, projectsDocsDir:string, repoDir:string, outputDir:string):Promise {\n\n    return new Promise((resolve) => {\n        const keys:string[] = Object.keys(projects);\n        Promise.all(keys.map((key:string) => fetchProjectDocs(key, projects[key], copyProjectsDocs, projectsDocsDir, repoDir, outputDir)))\n            .then((references:string[]) => {\n                keys.map((key, index) => projects[key].reference = references[index]);\n                resolve(projects);\n            })\n    })\n}\n                        \n                    \n\n                \n                    \n                        Creates the html file with reference to all projects within a monorepo.\nAPI of that module.\n\n                    \n                \n\n            \n        \n\n    src/paramsUtils.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            initParams\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : function (configFile: string): Promise {\n  return new Promise((resolve) => {\n    fs.readFile(configFile, (error: any, data: any) => {\n      if (error) {\n        console.warn(`using default parameters due to cannot read file ${configFile} due to ${error.message}`);\n        resolve(paramsDefault)\n        return\n      }\n      try {\n        let params: Params = JSON.parse(data.toString());\n        Object.keys(paramsDefault).map((key: string) => {\n          if (params[key] === undefined) {\n            params[key] = paramsDefault[key]\n          }\n        });\n        resolve(params);\n      } catch (error) {\n        console.warn(`using default parameters due to file ${configFile} not a valid configuration file`);\n        resolve(paramsDefault)\n      }\n    })\n  })\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            paramsDefault\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Params\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  copyProjectsDocs: true,\n  repoDir: path.join('.', 'example'),\n  projectsFile: \"angular.json\",\n  projectsDocsDir: \"compodoc\",\n  templatesDir: path.join('.', 'templates'),\n  templateFile: \"index.hbs\",\n  outputDir: path.join('.', 'repodoc'),\n  outputFile: \"index.html\"\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updateParamsWithArgs\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : function (params: Params): Promise {\n\n  return new Promise((resolve) => {\n    const args: Args = yargs.options({\n      configFile: { type: 'string', default: \"yapp.json\", alias: \"c\" },\n      askParams: { type: 'boolean', default: true, alias: \"a\" },\n      copyProjectsDocs: { type: 'boolean', default: true },\n      repoDir: { type: 'string', default: params.repoDir },\n      projectsFile: { type: 'string', default: params.projectsFile },\n      projectsDocsDir: { type: 'string', default: params.projectsDocsDir },\n      templatesDir: { type: 'string', default: params.templatesDir },\n      templateFile: { type: 'string', default: params.templateFile },\n      outputDir: { type: 'string', default: params.outputDir },\n      outputFile: { type: 'string', default: params.outputFile }\n    }).strict()\n      .argv\n\n    Object.keys(paramsDefault).map((key: string) => params[key] = args[key]);\n\n    resolve(params);\n\n  })\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            validateParams\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : function (params: Params): Promise {\n\n  return new Promise((resolve, reject) => {\n\n    let errors:string[] = [];\n\n    if (!fsu.dirExists(String(params.repoDir))) {\n      errors.push(`repository directory '${String(params.repoDir)}' is not valid`);\n    } else {\n      if (!fsu.fileExists(path.join(String(params.repoDir), String(params.projectsFile)))) {\n        errors.push(`projects file '${path.join(String(params.repoDir), String(params.projectsFile))}'does not exists`);\n      }\n    }\n\n    if (!fsu.dirExists(String(params.templatesDir))) {\n      errors.push(`templates directory '${String(params.templatesDir)}' is not valid`);\n    } else {\n      if (!fsu.fileExists(path.join(String(params.templatesDir), String(params.templateFile)))) {\n        errors.push(`template file '${path.join(String(params.templatesDir), String(params.templateFile))}'does not exists`);\n      }\n    }\n\n    if (!fsu.dirCreate(String(params.outputDir))) {\n      errors.push(`output directory '${String(params.outputDir)}' is not valid`);\n    }\n\n    if (!fsu.isValidFilename(String(params.outputFile))) {\n      errors.push(`outputfile name '${String(params.outputFile)}' is not valid`);\n    }\n\n    if (errors.length>0){\n      if (errors.length>1){\n        let s = \"multipe errors in parameters:\\n\";\n        errors.forEach((error) => s += '- ' + error + '\\n')\n        reject(new Error(s));\n      }else{\n        reject(new Error(errors.toString()));\n      }\n    }else{\n      resolve(params); \n    }\n  })\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            writeParams\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : function (params: Params, configFile: string): Promise {\n\n  return new Promise((resolve) => {\n    fs.writeFile(configFile, JSON.stringify(params), (error: any) => {\n      if (error) {\n        console.warn(`cannot write config file ${configFile} due to ${error.message}`);\n      }\n      resolve(params);\n    })\n  })\n}\n                        \n                    \n\n\n            \n        \n\n    src/repodoc.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            main\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : function():void {\n\n  const args: pu.Args = yargs.options({\n    configFile: { type: 'string', default: \"repodoc.json\", alias: \"c\" },\n    askParams: { type: 'boolean', default: true, alias: \"a\" },\n    copyProjectsDocs: { type: 'boolean', default: true },\n  })\n  .argv\n\n  pu.initParams(args.configFile)\n\n    .then(pu.updateParamsWithArgs)\n    .then(params => pu.askParams(params, args.askParams))\n    .then(pu.validateParams)\n    .then(params => pu.writeParams(params, args.configFile))\n\n    .then(du.createDoc)\n\n    .catch(e => console.error(e.message))\n\n  }\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/development-log.html":{"url":"additional-documentation/development-log.html","title":"additional-page - Development Log","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\nRepodoc - Development Log\nPrerequisites\nnodejs, typescript are installed globally.\nCreate Project/Application\nCreate project\n    md repodoc\n    cd repodoc\n\n    npm init -yAdopt package.json accordingly (description and version)\nPreparation\nInitialize typescript (create tsconfig.ts)\n    tsc --initChange tsconfig.ts\n\"outDir\": \"./build\",                        /* Redirect output structure to the directory. */\n\"rootDir\": \"./src\",                       /* Specify the root directory of input files. Use to control the output directory structure withCreate the src directory approtriately. build directory will be created during comilation. \n    md srcInstall dependencies according article\n    npm install chalk clear clui figlet inquirer minimist configstore @octokit/rest @octokit/auth-basic lodash simple-git touchInstall type for the dependencies\n    npm install @types/clear\n    npm install @types/figlet\n    npm install @types/inquirerFurther dependencies\n    npm install valid-filename\n    npm install fs-extraImplementation\nPreparation\nrepodoc uses\n\nrepoDir:string // path to mono repo\nprojectsFile:string // path to the file which contains the JSON object 'projects' (default angular.json)\ntemplatesDir:string; // path to template file(s) (default template)\ntemplateFile:string // template file name for creating outfile (default index.hbs)\noutputDir:string // path to output directory for summarized documentation (default repodoc)\noutputFile:string // path to landing page of summarized documentation to be created (default index.html)\n\noutputDir will be created if it does not exist.\noutputFile creation is core purpose of repodoc, so it will also be created. if it exists it will be overwritten.\nrepoDir, projectsFile and templatesDir, templateFile must exist.\nSo create \n\nexample (as repoDir), angular.json (as projectsFile)\n  md example\n  cd example\n  touch angular.json // an empty file is enough as projectsfile at the moment for cli\n  cd..\ntemplates (as templateDir), index.hbs (as projectsFile)\n  md templates\n  cd templates\n  touch index.hbs (an empty file is enough as template file at the moment for cli)\n  cd..\n\nrpd.ts\nCreate application file rpd.ts\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"additional-documentation/issues.html":{"url":"additional-documentation/issues.html","title":"additional-page - Issues","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\nIssues\nIssue 1\nIssue 2\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
